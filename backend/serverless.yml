service: doing-great-backend

frameworkVersion: "2"

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DOMAIN_SUFFIX: youre-doing-great
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  stage: dev
  region: ca-central-1
  httpApi:
    cors: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - lambda:*
      Resource: "*"
functions:
  register-account:
    handler: endpoints/http-register-account.handler
    events:
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PostConfirmation
  app-load:
    handler: endpoints/http-app-load.handler
    events:
      - http:
          path: /
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  call-me:
    handler: endpoints/http-call-me.handler
    events:
      - http:
          path: /call
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  text-me:
    handler: endpoints/http-text-me.handler
    events:
      - http:
          path: /text
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  add-message:
    handler: endpoints/http-add-message.handler
    events:
      - http:
          path: /messages
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  remove-message:
    handler: endpoints/http-remove-message.handler
    events:
      - http:
          path: /messages
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPoolMyUserPool
              - Arn
    CognitoSMSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "cognito-idp.amazonaws.com"
              Action:
                - "sts:AssumeRole"
              Condition:
                StringEquals:
                  "sts:ExternalId": "sms-external-id-doing-great"
        Path: "/"
    CognitoSMSPolicy:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyName: "CognitoSMSPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sns:publish"
              Resource:
                - "*"
        Roles:
          - Ref: CognitoSMSRole
    CognitoUserPoolMyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: doing-great-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - phone_number
        AutoVerifiedAttributes:
          - phone_number
        SmsConfiguration:
          ExternalId: "sms-external-id-doing-great"
          SnsCallerArn: !GetAtt CognitoSMSRole.Arn
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:custom.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPoolMyUserPool
        GenerateSecret: false
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: doing-great-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sub
            AttributeType: S
        KeySchema:
          - AttributeName: sub
            KeyType: HASH
